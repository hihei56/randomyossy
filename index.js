const { 
  Client, 
  IntentsBitField, 
  AttachmentBuilder, 
  SlashCommandBuilder,
  EmbedBuilder
} = require('discord.js');
const fs = require('fs').promises;
const path = require('path');
const axios = require('axios');
const http = require('http');
require('dotenv').config();

const imageFolder = process.env.IMAGE_FOLDER;
const imageHistory = [];
const MAX_HISTORY = 50;

// HTTP„Çµ„Éº„Éê„ÉºÔºà„Éò„É´„Çπ„ÉÅ„Çß„ÉÉ„ÇØÁî®Ôºâ
const server = http.createServer(async (req, res) => {
  if (req.url === '/health') {
    try {
      const healthData = {
        status: 'ok',
        uptime: Math.floor(process.uptime()),
        timestamp: new Date().toISOString(),
        discord: {
          botStatus: client.isReady() ? 'online' : 'offline',
          botUser: client.isReady() ? client.user.tag : 'not logged in',
        },
        environment: {
          BOT_TOKEN: process.env.BOT_TOKEN ? 'set' : 'unset',
          IMAGE_FOLDER: imageFolder ? 'set' : 'unset',
        },
        imageFolder: {
          path: imageFolder,
          exists: false,
          imageCount: 0,
          diskUsage: 'unknown',
        },
        imageHistory: {
          count: imageHistory.length,
          max: MAX_HISTORY,
        },
      };

      try {
        const stats = await fs.stat(imageFolder);
        healthData.imageFolder.exists = stats.isDirectory();
        const files = await fs.readdir(imageFolder);
        const imageFiles = files.filter(file =>
          ['.png', '.jpg', '.jpeg', '.gif'].includes(path.extname(file).toLowerCase())
        );
        healthData.imageFolder.imageCount = imageFiles.length;

        try {
          const { exec } = require('child_process');
          const util = require('util');
          const execPromise = util.promisify(exec);
          const { stdout } = await execPromise(`df -h "${imageFolder}" | tail -n 1`);
          healthData.imageFolder.diskUsage = stdout.trim();
        } catch (diskError) {
          healthData.imageFolder.diskUsage = 'ÂèñÂæóÂ§±Êïó';
          healthData.imageFolder.diskError = diskError.message;
        }
      } catch (error) {
        healthData.imageFolder.error = error.message;
      }

      res.writeHead(200, { 'Content-Type': 'application/json' });
      res.end(JSON.stringify(healthData, null, 2));
      console.log('[INFO] „Éò„É´„Çπ„ÉÅ„Çß„ÉÉ„ÇØÂÆüË°å:', healthData);
    } catch (error) {
      res.writeHead(500, { 'Content-Type': 'application/json' });
      res.end(JSON.stringify({ status: 'error', message: error.message }));
      console.error('[ERROR] „Éò„É´„Çπ„ÉÅ„Çß„ÉÉ„ÇØ„Ç®„É©„Éº:', error.message);
    }
  } else {
    res.writeHead(404);
    res.end('Not Found');
  }
});
server.listen(process.env.PORT || 8080, () => {
  console.log(`[INFO] HTTP server running on port ${process.env.PORT || 8080}`);
});

if (!process.env.BOT_TOKEN || !imageFolder) {
  console.error('[FATAL] ÂøÖË¶Å„Å™Áí∞Â¢ÉÂ§âÊï∞„ÅåÊú™Ë®≠ÂÆö„Åß„Åô:', {
    BOT_TOKEN: process.env.BOT_TOKEN ? 'Ë®≠ÂÆöÊ∏à„Åø' : 'Êú™Ë®≠ÂÆö',
    IMAGE_FOLDER: imageFolder ? 'Ë®≠ÂÆöÊ∏à„Åø' : 'Êú™Ë®≠ÂÆö',
  });
  process.exit(1);
}

async function checkImageFolder() {
  try {
    const stats = await fs.stat(imageFolder);
    if (!stats.isDirectory()) {
      console.error('[FATAL] IMAGE_FOLDER„ÅØ„Éá„Ç£„É¨„ÇØ„Éà„É™„Åß„ÅØ„ÅÇ„Çä„Åæ„Åõ„Çì:', imageFolder);
      process.exit(1);
    }
    console.log('[INFO] ÁîªÂÉè„Éï„Ç©„É´„ÉÄÁ¢∫Ë™çÊ∏à„Åø:', imageFolder);
  } catch (error) {
    console.error('[FATAL] ÁîªÂÉè„Éï„Ç©„É´„ÉÄ„Å´„Ç¢„ÇØ„Çª„Çπ„Åß„Åç„Åæ„Åõ„Çì:', {
      message: error.message,
      path: imageFolder,
    });
    process.exit(1);
  }
}
checkImageFolder();

console.log('[INFO] „Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥ÈñãÂßã');
console.log('[INFO] Node.js„Éê„Éº„Ç∏„Éß„É≥:', process.version);

const client = new Client({
  intents: [
    IntentsBitField.Flags.Guilds,
    IntentsBitField.Flags.GuildMessages,
    IntentsBitField.Flags.MessageContent,
  ],
});

client.on('ready', async () => {
  console.log(`[DEBUG] „Éú„ÉÉ„ÉàËµ∑ÂãïÔºÅ „É¶„Éº„Ç∂„Éº: ${client.user.tag}`);

  const commands = [
    new SlashCommandBuilder().setName('yoshito').setDescription('„É©„É≥„ÉÄ„É†„Å™ÁîªÂÉè„ÇíÈÄÅ‰ø°„Åó„Åæ„Åô'),
    new SlashCommandBuilder().setName('help').setDescription('„Éú„ÉÉ„Éà„ÅÆÊ©üËÉΩ„ÇíÁ¥π‰ªã„Åó„Åæ„Åô'),
  ];

  try {
    await client.application.commands.set(commands);
    console.log('[INFO] „Çπ„É©„ÉÉ„Ç∑„É•„Ç≥„Éû„É≥„Éâ„ÇíÁôªÈå≤„Åó„Åæ„Åó„Åü');
  } catch (error) {
    console.error('[ERROR] „Çπ„É©„ÉÉ„Ç∑„É•„Ç≥„Éû„É≥„ÉâÁôªÈå≤Â§±Êïó:', error);
  }
});

client.on('interactionCreate', async (interaction) => {
  if (!interaction.isCommand()) return;

  if (interaction.commandName === 'help') {
    const embed = new EmbedBuilder()
      .setTitle('üìå „Éú„ÉÉ„Éà„ÅÆ‰Ωø„ÅÑÊñπ')
      .setDescription('„Åì„ÅÆ„Éú„ÉÉ„Éà„Åß„ÅØ‰ª•‰∏ã„ÅÆÊìç‰Ωú„Åå„Åß„Åç„Åæ„ÅôÔºö')
      .addFields(
        { name: '/yoshito', value: 'ÁîªÂÉè„Éï„Ç©„É´„ÉÄ„Åã„Çâ„É©„É≥„ÉÄ„É†„Å´ÁîªÂÉè„ÇíÈÄÅ‰ø°„Åó„Åæ„Åô„ÄÇÈÅéÂéª50‰ª∂„ÅÆÈáçË§á„Å™„Åó„ÄÇ' },
        { name: '„É°„É≥„Ç∑„Éß„É≥ÔºãÁîªÂÉè', value: 'Bot„Å´„É°„É≥„Ç∑„Éß„É≥„ÇíÈ£õ„Å∞„Åó„Å§„Å§ÁîªÂÉè„Çí„Ç¢„ÉÉ„Éó„Åô„Çã„Å®„ÄÅBot„ÅåÁîªÂÉè„Çí‰øùÂ≠ò„Åó„Å¶ÊäïÁ®ø„Åó„Åæ„Åô„ÄÇ' }
      )
      .setColor(0x00bfff)
      .setFooter({ text: 'Ê£ÆÊú¨ÂñÑ‰∫∫„Éú„ÉÉ„Éà', iconURL: client.user.displayAvatarURL() });

    await interaction.reply({ embeds: [embed] });
    return;
  }

  if (interaction.commandName === 'yoshito') {
    await interaction.deferReply();
    try {
      const files = await fs.readdir(imageFolder);
      const imageFiles = files.filter(file =>
        ['.png', '.jpg', '.jpeg', '.gif'].includes(path.extname(file).toLowerCase())
      );
      const availableImages = imageFiles.filter(f => !imageHistory.includes(f));

      if (availableImages.length === 0) {
        imageHistory.length = 0;
        await interaction.editReply('ÁîªÂÉèÂ±•Ê≠¥„Çí„É™„Çª„ÉÉ„Éà„Åó„Åæ„Åó„Åü„ÄÇ„ÇÇ„ÅÜ‰∏ÄÂ∫¶ `/yoshito` „ÇíÂÆüË°å„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ');
        return;
      }

      const randomImage = availableImages[Math.floor(Math.random() * availableImages.length)];
      const imagePath = path.join(imageFolder, randomImage);
      imageHistory.push(randomImage);
      if (imageHistory.length > MAX_HISTORY) imageHistory.shift();

      const attachment = new AttachmentBuilder(imagePath);
      await interaction.editReply({ files: [attachment] });
    } catch (err) {
      console.error('[ERROR] /yoshito„Ç®„É©„Éº:', err);
      await interaction.editReply('ÁîªÂÉèÈÄÅ‰ø°„Å´Â§±Êïó„Åó„Åæ„Åó„Åü„ÄÇ');
    }
  }
});

client.on('messageCreate', async (message) => {
  if (message.author.bot) return;

  if (message.content === '/yoshito') {
    const files = await fs.readdir(imageFolder);
    const imageFiles = files.filter(file =>
      ['.png', '.jpg', '.jpeg', '.gif'].includes(path.extname(file).toLowerCase())
    );
    const availableImages = imageFiles.filter(f => !imageHistory.includes(f));

    if (availableImages.length === 0) {
      imageHistory.length = 0;
      await message.channel.send('ÁîªÂÉèÂ±•Ê≠¥„Çí„É™„Çª„ÉÉ„Éà„Åó„Åæ„Åó„Åü„ÄÇ„ÇÇ„ÅÜ‰∏ÄÂ∫¶ `/yoshito` „ÇíÂÆüË°å„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ');
      return;
    }

    const randomImage = availableImages[Math.floor(Math.random() * availableImages.length)];
    const imagePath = path.join(imageFolder, randomImage);
    imageHistory.push(randomImage);
    if (imageHistory.length > MAX_HISTORY) imageHistory.shift();

    const attachment = new AttachmentBuilder(imagePath);
    await message.channel.send({ files: [attachment] });
    return;
  }

  if (message.mentions.has(client.user) && message.attachments.size > 0) {
    const attachment = message.attachments.find(att =>
      ['.png', '.jpg', '.jpeg', '.gif'].includes(path.extname(att.name || '').toLowerCase())
    );
    if (!attachment) return;

    const text = message.content.replace(/<@!?[0-9]+>/g, '').trim();
    if (text.length > 200) {
      await message.channel.send('„ÉÜ„Ç≠„Çπ„Éà„ÅØ200ÊñáÂ≠ó‰ª•ÂÜÖ„Å´„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ');
      return;
    }

    let response;
    try {
      response = await axios.get(attachment.url, {
        responseType: 'arraybuffer',
        timeout: 10000,
      });
    } catch (err) {
      await message.channel.send('ÁîªÂÉè„ÅÆ„ÉÄ„Ç¶„É≥„É≠„Éº„Éâ„Å´Â§±Êïó„Åó„Åæ„Åó„Åü„ÄÇ');
      return;
    }

    try {
      await message.delete();
    } catch (_) {}

    const sanitizedFileName = attachment.name.replace(/[^a-zA-Z0-9._-]/g, '_');
    const fileName = `user_upload_${Date.now()}_${sanitizedFileName}`;
    const filePath = path.join(imageFolder, fileName);

    try {
      await fs.writeFile(filePath, Buffer.from(response.data));
    } catch (err) {
      await message.channel.send('ÁîªÂÉè‰øùÂ≠ò‰∏≠„Å´„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü„ÄÇ');
      return;
    }

    imageHistory.push(fileName);
    if (imageHistory.length > MAX_HISTORY) imageHistory.shift();

    const replyAttachment = new AttachmentBuilder(filePath);
    const sendOptions = { files: [replyAttachment] };
    if (text) sendOptions.content = text;

    await message.channel.send(sendOptions);
  }
});

client.on('error', (error) => {
  console.error('[ERROR] „ÇØ„É©„Ç§„Ç¢„É≥„Éà„Ç®„É©„Éº:', error);
});
client.on('shardError', (error, shardId) => {
  console.error(`[ERROR] „Ç∑„É£„Éº„Éâ${shardId}„Ç®„É©„Éº:`, error);
});
client.on('invalidated', () => {
  console.error('[FATAL] „Çª„ÉÉ„Ç∑„Éß„É≥ÁÑ°ÂäπÂåñ„ÄÇ„Éà„Éº„ÇØ„É≥„ÇíÁ¢∫Ë™ç„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ');
  process.exit(1);
});
client.login(process.env.BOT_TOKEN).catch((error) => {
  console.error('[FATAL] „É≠„Ç∞„Ç§„É≥Â§±Êïó:', error);
  process.exit(1);
});
process.on('uncaughtException', (error) => {
  console.error('[FATAL] Uncaught Exception:', error);
});
process.on('warning', (warning) => {
  console.warn('[WARNING]', warning);
});
process.on('SIGTERM', () => {
  console.log('[INFO] SIGTERM received. Closing client...');
  client.destroy();
  server.close(() => {
    console.log('[INFO] HTTP„Çµ„Éº„Éê„ÉºÁµÇ‰∫Ü');
    process.exit(0);
  });
});
setInterval(() => {
  console.log('[INFO] „Éó„É≠„Çª„ÇπÁ®ºÂÉç‰∏≠:', new Date().toISOString());
}, 60000);
